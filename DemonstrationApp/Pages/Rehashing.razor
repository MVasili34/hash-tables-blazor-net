@page "/rehashing"

<PageTitle>Simple Rehashing Hash-Map</PageTitle>

<h3>Simple Rehashing Hash Map</h3>

<h4>Record Search</h4>
<InputText @bind-Value="_searchId" placeholder="Identifier" style="width: 300px; margin-bottom: 20px; font-size: 1em"></InputText>
<button class="btn btn-info" @onclick="OnSearchClicked">Search</button>

@if (_hashMap is not null)
{
    <p><em>Collisions: @_hashMap.CollisionCount</em></p>
    <p><em>Write attempts (%): @string.Format("{0:F2}", (double)_hashMap.CollisionCount * 100 / 30)</em></p>
    <p><em>Last search comparions: @_hashMap.LastSearchComparions </em></p>
}
@if (_hashMap == null || _display)
{
    if (_foundClient is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Status</th>
                    <th>Identifier</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p style="color: red">Occupied</p></td>
                    <td>@_foundClient.FullName</td>
                    <td>
                        <a class="btn btn-danger" @onclick="() => OnEmployeeDeletedClicked(_foundClient.FullName)">
                            <i class="oi oi-trash"></i>
                        </a>
                    </td>
                </tr>
            </tbody>
        </table>
    }
    else
    {
        <p><em>Nothing found...</em></p>
    }
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Hash</th>
                <th>Status</th>
                <th>Identifier</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in _hashMap!.HashRows)
            {
                <tr>
                    @if (client?.Status == RowStatus.Free)
                    {
                        <td>@(_keys++)</td>
                        <td><p style="color: green">Free</p></td>
                    }
                    @if (client?.Status == RowStatus.Deleted)
                    {
                        <td>@(_keys++)</td>
                        <td><p style="color: blue">Removed</p></td>
                    }
                    @if (client?.Status == RowStatus.Occupied)
                    {
                        <td>@(_keys++)</td>
                        <td><p style="color: red">Occupied</p></td>
                        <td>@client.Value?.FullName</td>
                        <td>
                            <a class="btn btn-danger" @onclick="() => OnEmployeeDeletedClicked(client.Key!)">
                                <i class="oi oi-trash"></i>
                            </a>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private readonly IOpenAddressHashMap<string, Record>? _hashMap = new SimpleRehashMap<string, Record>();
    private string _searchId = string.Empty;
    private Record? _foundClient;
    private bool _display = false;
    private int _keys = 0;

    protected override void OnInitialized()
    {
        string filePath = Environment.CurrentDirectory;
        ExportImportService<Record> service = new(filePath, "clients.csv");
        service.ExportPersons(DataGenerator.GenerateClients(30));

        IEnumerable<Record> clients = service.Import();
        foreach (Record client in clients)
        {
            _hashMap!.Add(client.FullName, client);
        }
    }

    private void OnSearchClicked()
    {
        if (!_hashMap!.TryGetValue(_searchId.Trim(), out Record? _found))
        {
            _foundClient = null;
            _display = true;
        }
        if (string.IsNullOrEmpty(_searchId))
        {
            _display = false;
            _keys = 0;
        }
        else
        {
            _display = true;
            _foundClient = _found;
        }
    }

    private void OnEmployeeDeletedClicked(string key)
    {
        _hashMap!.Remove(key);
        _foundClient = null;
        _keys = 0;
    }
}
