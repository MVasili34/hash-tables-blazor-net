@page "/chaining"

<PageTitle>Chaining Hash-Map</PageTitle>

<h1>Chaining Hash Table</h1>

<h4>Record Search</h4>
    <InputText @bind-Value="_searchId" placeholder="Identifier" style="width: 300px; margin-bottom: 20px; font-size: 1em"></InputText>
<button class="btn btn-info" @onclick="OnSearchClicked">Search</button>
@if (_hashMap is not null)
{
    <p><em>Collisions: @_hashMap.CollisionCount</em></p>
    <p><em>Write attempts (%): @string.Format("{0:F2}",(double)_hashMap.CollisionCount * 100/30)</em></p>
    <p><em>Last search comparions: @_hashMap.LastSearchComparions </em></p>
}
@if (_viewCollection == null)
{
    if (_foundClient is not null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Identifier</th>
                </tr>
            </thead>
            <tbody>
            <tr>
                    <td>@_foundClient.FullName</td>
                    <td>
                        <a class="btn btn-danger" @onclick="() => OnEmployeeDeleteClicked(_foundClient.FullName)">
                            <i class="oi oi-trash"></i>
                        </a>
                    </td>
            </tr>
            </tbody>
        </table>
    }
    else
    {
        <p><em>Nothing found...</em></p>
    }
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Hash</th>
                <th>Identifier</th>
     
            </tr>
        </thead>
        <tbody>
            @foreach (int key in _viewCollection.Keys)
            {
                <tr>
                    <td>@key</td>
                    @foreach (Record client in _viewCollection[key])
                    {
                        <td>@client.FullName</td>
                        <td><a class="btn btn-danger" @onclick="() => OnEmployeeDeleteClicked(client.FullName)">
                            <i class="oi oi-trash"></i>
                            </a>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private readonly IChainHashMap<string, Record>? _hashMap = new ChainHashMap<string, Record>();
    private Dictionary<int, IEnumerable<Record>>? _viewCollection;
    private string _searchId = string.Empty;
    private Record? _foundClient;

    protected override void OnInitialized()
    {
        string filePath = Environment.CurrentDirectory;
        ExportImportService<Record> service = new(filePath, "clients.csv");
        service.ExportPersons(DataGenerator.GenerateClients(30));

        IEnumerable<Record> clients = service.Import();
        foreach(Record client in clients)
        {
            _hashMap!.Add(client.FullName, client);
        }
        _viewCollection = _hashMap!.OutputValues();
    }

    private void OnSearchClicked()
    {
        if(!_hashMap!.TryGetValue(_searchId.Trim(), out Record? _found))
        {
            _viewCollection = null;
            _foundClient = null;
        }
        if (string.IsNullOrEmpty(_searchId))
        {
            _viewCollection = _hashMap.OutputValues();
        }
        else
        {
            _viewCollection = null;
            _foundClient = _found;
        }
    }

    private void OnEmployeeDeleteClicked(string key)
    {
        if(_hashMap!.Remove(key))
        {
            _viewCollection = _hashMap.OutputValues();
            _foundClient = null;
        }
    }
}
